tasks.register('installGitHooks', Copy) {
    from(layout.projectDirectory.dir('gradle/hooks'))
    into(layout.projectDirectory.dir('.git/hooks'))
    fileMode = 0775
}

tasks.register('printGitHooksStatus') {
    def preCommit = layout.projectDirectory.file('.git/hooks/pre-commit')
    def prePush   = layout.projectDirectory.file('.git/hooks/pre-push')

    // Esta tarea no tiene inputs reales; hacela siempre "no up-to-date" para ver el estado
    outputs.upToDateWhen { false }

    doLast {
        println "pre-commit: " + (preCommit.asFile.exists() ? 'OK' : 'MISSING')
        println "pre-push  : " + (prePush.asFile.exists() ? 'OK' : 'MISSING')
    }
}

def publishable = [
        ':common', ':token', ':ast', ':lexer', ':parser',
        ':interpreter', ':analyzer', ':formatter', ':cli'
].collect { project(it) }


configure(publishable) {
    apply plugin: 'maven-publish'

    plugins.withId('java') {
        publishing {
            publications {
                if (findByName("mavenJava") == null && components.findByName("java") != null) {
                    register("mavenJava", MavenPublication) {
                        from components.java
                    }
                }
            }
        }
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                def gprRepo = System.getenv("GITHUB_REPOSITORY") ?: "Ingenieria-en-sistemas-2025/PrintScriptV1"
                url = uri("https://maven.pkg.github.com/${gprRepo}")
                credentials {
                    username = System.getenv("GITHUB_ACTOR") ?: ""
                    password = System.getenv("GITHUB_TOKEN") ?: ""
                }
            }
        }
    }
}